{:paths ["bb"]
 :tasks
 {:requires ([clojure.string :as string]
             [changelog])
  :init
  (do
    (defn shell-and-log
      ([x] (shell-and-log {} x))
      ([opts x]
       (println x)
       (when (seq opts) (println opts))
       (shell opts x))))

  test       (shell-and-log (str "./addons/gdUnit4/runtest.sh -c -a test"))
  test-match (let [arg (some-> *command-line-args* first)]
               (shell-and-log (str "./addons/gdUnit4/runtest.sh -c -a " arg)))

  release
  (let [tag (some-> *command-line-args* first)]
    (if-not tag
      (do
        (println "Ensure tests are passing")
        (println "Ensure empty diff")
        (println "Update version in addons/log/plugin.cfg")
        (println "Run `bb release <new-version-tag>`")
        (println "Create release on github")
        (println "Update version number in the asset store"))
      (let [plugin-cfg (slurp "addons/log/plugin.cfg")]
        (if (not (string/includes? plugin-cfg (str "version=\"" tag "\"")))
          (println "plugin.cfg version does not match passed tag" tag)
          (do
            (println "Run `bb changelog <new-version-tag>` to update the Changelog.md")
            (changelog/rewrite-changelog {:latest-tag-label tag})
            (println "Stage expected files (plugin.cfg and changelog.md)")
            (shell-and-log "git add addons/log/plugin.cfg")
            (shell-and-log "git add CHANGELOG.md")
            (shell-and-log (str "git commit -m 'chore: new version: " tag "'"))
            (shell-and-log (str "git tag " tag))
            (shell-and-log (str "git push origin " tag))
            (shell-and-log (str "git push"))
            (println "TODO: Create release on github!")
            (println "TODO: Update version number in the godot asset library"))))))

  commit-version
  (let [tag (some-> *command-line-args* first)]
    (if-not tag
      (println "Expected passed tag")
      (do
        (println "Writing commit for all staged changes!")
        (shell-and-log (str "git commit -m 'chore: new version: " tag "'")))))

  changelog (let [tag-overwrite (some-> *command-line-args* first)]
              (changelog/rewrite-changelog {:latest-tag-label tag-overwrite}))

  add-and-push-tag
  (let [tag (some-> *command-line-args* first)]
    (if-not tag
      (println "Expected passed tag")
      (do
        (println "Creating and pushing tag!")
        (println "WARN: Assuming the current HEAD should be tagged and pushed")
        (shell-and-log (str "git tag " tag))
        (shell-and-log (str "git push origin " tag)))))}}
